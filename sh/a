#!/bin/bash 
if [[ $(command -v h) == '' ]]; then [[ $- != *i* ]] && return; if [[ $BASH_SOURCE =~ ^('a'|'./a')$ && $(grep 'cd;. ./a' .profile) == '' ]]; then echo 'cd;. ./a' >> .profile; echo 'cd;. ./a' >> .bashrc; fi; if [[ $(eval x='('$(echo $BASH_SOURCE|sed 's/\// /g')')';echo ${x[-1]}) != 'a' ]]; then mv $BASH_SOURCE $(dirname $(realpath $BASH_SOURCE))/a; fi; if [[ $(which sudo) == '' ]]; then alias sudo=''; fi; if [ -f /.jps1 ]; then export PS1='\[$(tput bold)\]\[$(tput setaf '$(cat /.jps1|awk '{print $1}')')\]\u@\h'$(cat /.jps1|awk '{print $2}')':\w\$\[$(tput sgr0)\] '; else export PS1='\u@\h:\w\$ '; fi; 
echo -e '\n'set\ {nu,ai} '\n'nmap\ {f\ gt,F\ gT,I\ gg,O\ G,m\ z.,K\ \<C-B\>,J\ \<C-F\>,r\ \<C-R\>,\,\ :\%s\/\/\/gc,\,py\ :\%s\/\\t\/\ \ \ \ \ \ \ \ \/gc,qq\ :qa\<CR\>,\;\ :set\ nu\!\<CR\>,noai\ :set\ noai\<CR\>,spy\ :set\ noai\ ts=4\ sw=4\ expandtab\<CR\>,ipy\ gg\<C-V\>G\<S-i\>\ \ \ \ \<ESC\>,dpy\ gg0\<C-V\>G$\?\\S\<CR\>0lll\<Del\>\<ESC\>,t\ :tabnew\<CR\>:e,.\ /\<C-R\>\"\<CR\>,R\ :so\ ~/.vimrc\<CR\>} '\n'imap\ \<F2\>\ \<ESC\> '\n'{n,i}map\ \<F{8,9,10}\>\ \<ESC\>\:w!\<CR\> '\n'set\ {tabpagemax=999,laststatus=2,statusline=%F,backspace=indent\,eol\,start}>~/.vimrc;_sc(){ local e=eval c=screen s=\'select;echo -e '\n'bindkey\ {{^[l,¬}\ $e\ next,{^[h,˙}\ $e\ prev,{^[t,†}\ $e\ $(echo $c\ {,,,,,,,,,}),{^[T,ˇ}\ $e\ $c,{^[/,÷}\ number,{^[c,^[x,ç}\ copy,{^[D,Î}\ detach,^[a\ windows,^[v\ paste\ .,{^[f,ƒ}\ $e\ $s\ 0\',{^[1,¡}\ $e\ $s\ 3\',{^[2,§}\ $e\ $s\ 6\',{^[3,£}\ $e\ $s\ 9\',{^[4,¢}\ $e\ $s\ 12\',{^[5,ª}\ $e\ $s\ 15\',{^[6,ﬂ}\ $e\ $s\ 18\',{^[7,¨}\ $e\ $s\ 21\',{^[8,ˆ}\ $e\ $s\ 24\',{^[9,Ø}\ $e\ $s\ 27\',{^[0,‚}\ $e\ $s\ 30\'} '\n'defscrollback\ 9999 '\n'maptimeout\ 0>~/.screenrc;};_sc; #'
fi; export TERM=xterm; shopt -s dotglob; alias a='alias'; [ -f ax ] && . ax 2>/dev/null; 
a ll='ls -al'; a llt='ll -tr'; a lld='ll -d'; a py='python3'; a d='diff -sr'; a pip='pip3'; a ..='cd ..'; a dd='date "+DATE: %Y-%m-%d%nTIME: %H:%M:%S"'; a cc='clear'; a chkport='nc -z -v -w5'; a jtree='tree -ahfniF --du --dirsfirst -o .tree'; a jcmp='cmp -l'; a _a='sudo apt-get -y'; a japtu='_a update;_a upgrade;_a dist-upgrade;_a autoremove;_a clean'; a vi='vim -p'; a jvisudo='sudo sh -c "echo $USER ALL=NOPASSWD:ALL>>/etc/sudoers"'; a rr='sudo ln -s ~/{a,k3d} /root/. 2>/dev/null;sudo su -l'; a ,='cd'; a rmr='pause;sudo rm -rf'; a pyser='py -m http.server&'; a jskey='ssh-keygen -t rsa -f id_rsa'; a xx='chr=({a..z});x=$(date +%Y)-2020;x=${chr[$x]};x=${x}$(printf "%x" $((date +%m)|sed "s/^0*//"))$(date +%d);echo $x'; a delswp='rm $(find . -name "*.swp") 2>/dev/null'; a jpath='echo $PATH>_;vi _;pause;export PATH=$(cat _)'; a sysclr='journalctl --vacuum-time=1d;snap list --all|awk "/disabled/{print \$1,\$3}"|while read x y;do snap remove $x --revision=$y;done;apt -y autoremove'; a dot1='shopt -s dotglob'; a dot0='shopt -u dotglob'; a llw='echo $(($(ll|wc|awk "{print \$1}")-3))'; a pyserx='kill $(ps aux|grep "python3 -m http.server"|awk "{print \$2}"|head -n1)'; a jsonconv='sed -i -e "s/\^\[/u001b/g"'; a mkcdt='cd $(mktemp -d)'; a mkcdx='eval sudo\ {mkdir,chmod\ 777}\ \/x\;; cd /x'; a umnt='fusermount -u'; a jaria2='[[ $(which aria2c) == "" ]]&&eval sudo\ apt\ {update,install\ -y\ aria2}\;; aria2c -c --seed-ratio=0.1 --max-upload-limit=1K --max-overall-upload-limit=1K --seed-time=0 -l logg --file-allocation=none'; a jfindn='find . -type f -newermt'; a psmem='ps ax -o pid,user,%mem,command|sort -brk3|more'; a jdig='dig any @8.8.8.8'; 
pause(){ read -rsp $"Press enter to continue... $*"$'\n\n';}; freeport(){ fuser -k $1/tcp;}; jkill(){ kill -9 $(jpidof "$@");}; jhash(){ echo $1|shasum -a 256|awk '{print $1}';}; jsocat(){ socat -d -d -lf ~/socat.log tcp4-listen:$2,bind=$1,reuseaddr,fork ${5:-tcp4}:$3:$4$([[ $5 == 'openssl' ]]&&echo ,verify=0)&:;}; jinlets(){ inlets client --url wss://$1.herokuapp.com --token $(jhash $2) --upstream $3&:;cc;}; log(){ y=$(echo $@ | sed "s/ /_/g;s/\//%/g");eval $@ 2>&1|tee log_$y; tss log_$y;}; ts(){ for x in "$@";do mv "$x" "$(date +"%Y%m%d_%H%M%S")_$x";done;}; tss(){ for x in "$@";do mv "$x" "${x}_$(date +"%Y%m%d_%H%M%S")";done;}; jfind(){ find ${2:-'.'} -name "$1" 2>/dev/null;}; jfindw(){ find . -type f -name "${2:-*}" -exec grep -q "$1" {} \; -exec ls -al {} \+;}; jfindvi(){ find ${2:-.} -name "$1" -exec vim -p {} \+;}; jfindwvi(){ vi $(jfindw "$1" "$2" | awk '{print $9}');}; jfinddel(){ find ${2:-'.'} -name "$1" 2>/dev/null -exec sudo rm {} \;;}; jfindr(){ for x in $(find ${6:-.} -name "$1");do y="$2 $x $3 $(echo $x|sed s/${4/\./\\.}/${5/\./\\.}/g)";echo $y;eval $y;done;}; LL(){ if [[ $1 == '.' ]]; then eval echo $(pushd)|awk '{print $1}'; return; fi; pushd $1>/dev/null;ll;}; te(){ for i in $@;do tar -jpcf ./$i.jbz2 $i;done;}; td(){ for i in $@;do tar -jpxvf ./$i;done;}; mkcd(){ mkdir $1;cd $1;}; s(){ [ ! -f $1 ]&&x=~/$1||x=$1;. $(realpath $x) ${@:2};}; jrsync(){ rsync -avzP -e ssh $1:$2 .;}; jjq(){ ([[ $3 == '' ]]&&cat $1|jq $2)||((cat $1|jq $2)>$1.x&&mv $1.x $1);}; sr(){ local s t a b n i;s=$(eval echo $(cat $1));t=$(echo $s|sed 's/\//\|/g');eval a='('$s')';eval b='('$t')';n=$((${#a[@]}-1));if [[ $2 == '' ]];then echo $s;elif [[ $2 == 'v' ]];then vi $s;elif [[ $2 == 's' ]];then for i in `seq 0 $n`;do cp ${a[$i]} ${b[$i]};done;elif [[ $2 == 'r' ]];then for i in `seq 0 $n`;do cp ${b[$i]} ${a[$i]};done;fi;}; jil(){ if [[ $1 == '' ]];then ps -aux|grep inlets;return;fi;jinlets $1 $2 localhost:$3;}; jils(){ inlets server -p ${1:-443}&:;}; jilc(){ inlets client --insecure --url ws://$jila:${2:-443} --upstream localhost:$1&:;}; jpidof(){ echo $(ps -aux|grep "$1"|awk '{print $2}')|sed 's/\n/ /g';}; und(){ local x;x=$(lsattr $1);x=${x:4:1};if [[ $x == '-' ]];then sudo chattr -R +i $@;elif [[ $x == 'i' ]];then sudo chattr -R -i $@;fi;lsattr $@;}; logtop(){ local x=$'\e\[1m';cat $1|grep $2|sed "s/$x//g"|vi -;}; be(){ te $1;gpg -c $1.jbz2;rm $1.jbz2;kill $(ps aux|grep gpg-agent|awk '{print $2}') 2>/dev/null;}; bd(){ gpg -q -o $1.tmp $1;td $1.tmp;rm $1.tmp;kill $(ps aux|grep gpg-agent|awk '{print $2}') 2>/dev/null;}; jzip(){ [[ $2 == '' ]]&&zip -ryq $1.z $1||zip -rq - $1|/bin/dd of=$2/$1.z;}; jread(){ eval "read -rsp $'$1:\n' $1";}; s2a(){ eval s2a='('$(echo $1|sed "s|$2| |g" 2>/dev/null)')';}; jurl(){ local x;x=$([[ $(which curl) != '' ]]&&curl -sL -o /dev/null -w %{url_effective} $1||wget -O /dev/null $1 2>&1|grep http|awk "END{print \$3}");[[ $2 == '' ]]&&echo $x||echo $x/$2;}; jssl(){ curl -vvkI https://$1 2>&1|awk 'BEGIN{x=0}/^\* SSL connection/{x=1}/^\*/{if(x)print}';}; 
a gitrmc='git rm -r --cached'; a gitgc='git gc --prune=all'; a gitdiff="git add .&&git status|grep 'modified:\|new file:'|awk '{print $NF}'|git diff --cached"; a gitst='git status'; a gitlsr='git ls-remote -q'; a gitres='git reset --hard HEAD'; a gitconfig='echo -e "[core]\nrepositoryformatversion=0\nfilemode=true\nbare=false\nlogallrefupdates=true\n[remote \"origin\"]\nurl=https://github.com/\nfetch=+refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\nremote=origin\nmerge=refs/heads/master">.git/config'; 
gitclone(){ git clone $(jurl $1);}; gitx(){ if [[ $1 == '' ]]; then git ls-files -v|grep ^h; elif [[ $1 == '.' && $2 == '.' ]]; then git ls-files -z | xargs -0 git update-index --no-assume-unchanged; elif [[ $1 == '.' ]]; then git ls-files -z | xargs -0 git update-index --assume-unchanged; elif [[ $2 == '.' ]]; then git update-index --no-assume-unchanged $1; else git update-index --assume-unchanged $1; fi;}; jgu(){ eval git\ config\ --global\ {user.name\ j,user.email\ jamessheen@users.noreply.github.com,alias.st\ status,alias.lsr\ "ls-remote\ -q"}\;;git add .;git commit -am "${1:-update}";git diff --name-only $(git rev-parse --abbrev-ref HEAD) origin/$(git rev-parse --abbrev-ref HEAD);pause;git push ${@:2};}; 
a jdi='docker images'; a jdp='docker ps -a'; a jdocins='docker inspect'; a jdocnet='docker network'; a jdocsta='docker stats --no-stream'; a jdocipk3s='jdocip $(jdochostk3s)'; a jdocexe='docker exec -it'; a jdocrmv='docker volume rm $(docker volume ls -qf dangling=true)'; a jdocrma='docker ps -a;pause;docker rm -f $(docker ps -aq) 2>/dev/null;jdocrmv 2>/dev/null'; a jdochostk3s='jkubget node|grep control-plane|awk "{print \$1}"'; 
jdr(){ docker run -it -v $(realpath $PWD):/root $@;}; jde(){ docker exec -it $1 ${2:-bash};}; jdocip(){ docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $1;}; jdrr(){ if [[ $(which docker) == "" ]];then sudo apt-get update;sudo apt-get install -y docker.io;sudo chmod 666 /var/run/docker.sock;fi;docker run -it -v $(realpath $PWD):/root -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp --name js --network host $( ([[ $1 == '' ]]&&echo 'js72/js')||([[ $1 == '.' ]]&&echo "--gpus ${2:-all} js72/js")||(echo $@));}; jdif(){ jdi -f reference=$1;}; jdocpsf(){ eval docker ps -a -f $1=$2 --format "{{.ID}}";}; 
a jk3dc='k3d cluster'; a jk3dcc='jk3dc create'; a jk3dcd='jk3dc delete'; a jk3dcl='jk3dc list'; a jk3dn='k3d node'; a jk3dnc='jk3dn create'; a jk3dnd='jk3dn delete'; a jk3dnl='jk3dn list'; a jk3ddel='jk3dcd -a'; 
jk3d(){ jk3dcc -a ${1:-2} --k3s-arg "--disable=traefik@server:0" --no-lb ${@:2};kubectl create ns js;}; #--k3s-server-arg --no-deploy --k3s-server-arg traefik
a jkub='kubectl'; a jkubget='jkub get'; a jkubg='kubectl get svc,nodes,pod -A -o wide'; a jkubdes='jkub describe'; a jkubeve='jkub get events -A'; a jkubdel='jkub delete'; a jkubdelnam='jkubdel namespace'; a jkubevenam='jkubeve --namespace'; a jkubns='jkub config view | grep namespace'; a jkubgetdep='jkub get deployments -A -o wide'; a jkubdelall='echo "$(jkubns)";pause;jkubdel deployments,service,pod --all;jkubdelnam $(jkubns | sed "s/namespace: //g")'; a jkubcre='jkub create'; a jkubcredep='jkubcre deployment'; a jkubreg='jkubcre ns js;jkubcredep registry --image=registry:latest --port=5000 -n js;kubectl expose deployment registry -n js --type=NodePort --port=5000 --overrides "{\"spec\":{\"ports\":[{\"port\":5000,\"nodePort\":30500}]}}";jsocat localhost 5000 $(jdocipk3s) 30500'; a jkubgetpvc='jkub get pvc -A'; a jkubgetnam='jkubget namespace'; a jkubapi='jkub api-resources|more; pause; jkub api-versions|more'; a jkublog='jkub logs --all-containers'; a jkubp='jkubdes pods -A'; a jkubc='jkubdel deploy,svc -A --all'; a jkubpat='jkub patch'; a jkubgw='eval watch $(a jkubg|sed "s/alias jkubg=//g")'; a jkubymls='mkcd ymls;for x in $(jkub api-resources|awk "{print \$1}");do [ $x = NAME ]&&continue;echo -$x>>.e;jkub get $x -A -o yaml>$x 2>>.e;done'; a jkublogs='unset y;mkcd jkublogs;for x in $(jkub get pod -A|awk "{print \$1,\$2}");do if [[ $y == "" ]];then y=$x;else jkublog $x -n $y>>$y_$x 2>>.e;unset y;fi;done;for x in $(ls);do echo === $x>>.err;grep -n ERROR $x>>.err;done'; 
jkubnns(){ kubectl config set-context --current --namespace $1;jkubns;}; jkubproxy(){ if [[ $1 == 'x' ]]; then jkill 'kubectl proxy'; return; fi; kubectl proxy --accept-hosts=${1:-localhost} -p ${2:-8001}&:;}; jkubw(){ watch kubectl get -A ${1:-svc,node,pod};}; jkubready(){ while s2a $(jkubg|grep $1|awk 'END{print $3}') '/'&&[[ $s2a == '' || ${s2a[0]} != ${s2a[1]} ]];do :;done;}; jke(){ jkub exec -it $1 ${@:3} -- ${2:-sh};}; jkubd(){ jkubnns ${1:-$(jkubns|awk \'{print $2}\')};vi <(eval {jkubget\ -o\ yaml,jkubdes,jkublog}\ $2\;echo\ ===\;);}; 
:<<'_'
##<();((2( (; 
#docker system prune -af --volumes; 
a jkubreg='jkubcre ns js;jkubcredep registry --image=registry:latest --port=5000 -n js;kubectl expose deployment registry -n js --type=LoadBalancer --port=5000 --target-port=5000;jsocat localhost 5000 $(jdocipk3s) 5000'; 
_

